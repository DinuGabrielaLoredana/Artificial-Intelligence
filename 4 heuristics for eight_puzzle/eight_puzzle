from search import EightPuzzle
import math

class EightPuzzleMiss(EightPuzzle):
    def h(self, node):
        """ Return the heuristic value for a given state. Default heuristic function used is
        h(n) = number of misplaced tiles """
        return sum(s != g for (s, g) in zip(node.state, self.goal))
    
        
class EightPuzzleMht(EightPuzzle):
    def h(self, node):
        """ implement Manhattan distance. Hint! Look at
        Missplaced Tiles heuristic function above """
        return sum(abs(e - s) for s, e in zip(node.state, self.goal))

class EightPuzzleEuclidianDistance(EightPuzzle):
  def h(self,node):
    return math.sqrt(sum(abs((e - s)*(e-s)) for s, e in zip(node.state, self.goal)))


class ColAndRow(EightPuzzle):
    def __init__(self,t1,t2):
      self.initial = t1
      self.goal = t2
    def h(self,node):
        sz = math.ceil(math.sqrt(len(self.goal)))
        sr = sc = 0
        for i in range(0, sz):
           #  print(list(zip(self.initial[i * sz:(i + 1) * sz], self.goal[i * sz:(i + 1) * sz])))
             sr = sr + sum(s != g for (s, g) in zip(self.initial[i * sz:(i + 1) * sz], self.goal[i * sz:(i + 1) * sz]))
        for i in range(0, sz):
             #print(list(zip(self.initial[i:len(self.initial):sz], self.goal[i:len(self.goal):sz])))
             sc = sc + sum(s != g for (s, g) in zip(self.initial[i:len(self.initial):sz], self.goal[i:len(self.goal):sz]))
        return sr + sc
                  
      

class EightPuzzleLinearConflict(EightPuzzle): 
    def h(self,node):
        size = math.ceil(math.sqrt(len(self.goal)))
        line_sum = 0

        for i in range(0, size):
            line_sum = line_sum + sum(
                s != g for (s, g) in zip(self.initial[i * size:(i + 1) * size], self.goal[i * size:(i + 1) * size]))

        return line_sum



class NilssonSeq(EightPuzzle):

    """ h(n) = P(n) + 3*S(n)
    P(n) is the Manhattan Distance of each tile from its proper position.
    S(n) is the sequence score obtained by checking around the non-central squares in turn, allotting 2 for every tile
    not followed by its proper successor and 1 in case that the center is not empty.  
    This heuristic is not admissible
    
   https://heuristicswiki.wikispaces.com/N+-+Puzzle
    """

    def h(self,node):
        manhattan_distance = sum(abs(e - s) for (s, e) in zip(node.state, self.goal))
        sequence_score = 0
        center_squares_matrix_size = math.ceil((len(self.goal)//2))
        sequence_score += math.sqrt(sum(abs((e - s) * (e - s)) for (s, e) in zip(node.state, self.goal)))
        for i in range (0,len(self.goal)):

            if i % center_squares_matrix_size == 0:
                sequence_score += 1
            elif i+1 != (i+1) % center_squares_matrix_size:
                sequence_score += 2

        return manhattan_distance + 3*sequence_score

